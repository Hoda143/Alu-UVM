`include "agent.sv"
`include "scoreboard.sv"
`include "coverage.sv"
// Environment class responsible for instantiating and connecting all the components
class Alu_env extends uvm_env;
 
  Alu_agent agnt; // Instance of the ALU agent, which includes the sequencer, driver, and monitor
  Alu_scoreboard scb; // Instance of the ALU scoreboard, used for checking the correctness of operations
  Alu_coverage cov; // Instance of the ALU coverage collector, used for gathering functional coverage

  `uvm_component_utils(Alu_env)
  
  
  function new(string name, uvm_component parent);
    super.new(name,parent);
  endfunction:new
 
  // Build phase: Sets up the environment, creating instances of the agent, scoreboard, and coverage
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    agnt=Alu_agent::type_id::create("agnt",this);
    scb=Alu_scoreboard::type_id::create("scb",this);
    cov=Alu_coverage::type_id::create("cov",this);
  endfunction
  
  // Connect phase: Connects the analysis ports of the monitor to the scoreboard and coverage collector
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase); 
    agnt.alu_mon.actual_scoreboard_port.connect(scb.actual_scoreboard_port); // Connect the monitor's analysis port to the scoreboard's port
    agnt.alu_mon.actual_scoreboard_port.connect(cov.analysis_export);     // Connect the monitor's analysis port to the coverage port

     
  endfunction

 endclass
    
    